Build a Career Path Suggestion Engine in JavaScript/Node.js that integrates into my existing Smart Career Assessment website.

Requirements:

Inputs:

marks: Subject-wise marks (0–100) for relevant subjects (Physics, Math, Accounts, etc.).

answers: Array of quiz answers (strings).

chosenStream: Selected academic stream (science, commerce, arts, creative, social).

Scoring System:

Aptitude Score (Marks):

Average of all marks (normalized to 0–100).

Apply a Penalty: Subtract 2 points per core subject under 40 marks (subject list varies by stream).

Interest Score (Quiz):

Match keywords in quiz answers with predefined keywords per career cluster (science, commerce, etc.).

Add 10 points per keyword match (max 100).

Stream Weight:

science: 8, commerce: 7, arts: 6, creative: 5, social: 5.

Final Score:

FinalScore = (Aptitude * 0.4) + (Interest * 0.4) + (StreamWeight * 2)


Round to nearest integer (0–100).

Mismatch Detection:

If Interest > 70 but Aptitude < 50, flag as Interest-Driven, Needs Skill Boost.

If Aptitude > 70 but Interest < 50, flag as Academically Strong, Explore Interest.

If both are <50, recommend exploring multiple streams.

Career Suggestion Logic:

Based on highest matching cluster (science, commerce, arts, creative, social) from quiz answers.

Within the cluster, prioritize careers only if marks meet thresholds:

Engineering: Physics + Math ≥ 70 each.

Medical: Biology ≥ 70.

CA/Finance: Accounts + Math ≥ 65.

Arts/Creative/Social: No hard cutoff, but recommend strengthening weak areas.

If marks don’t meet thresholds, display:
“Your interest aligns with X, but marks in Y need improvement. Consider bridging courses or alternative careers.”

Output:

finalScore (0–100).

confidenceLevel: High / Moderate / Low fit.

primaryCluster: Science / Commerce / Arts / Creative / Social.

top3Careers: Array of recommended careers.

advice: Contextual improvement tips based on weak subjects or mismatch.

Code Specs:

Use clean, modular JavaScript functions.

Example structure:

calculateAptitude(marks)

calculateInterest(answers)

detectMismatch(aptitude, interest)

suggestCareers(cluster, marks)

Prepare this logic as a standalone module to integrate with React frontend.

Deliverable:

A single careerLogic.js file that:

Exports a getCareerSuggestions(marks, answers, chosenStream) function returning all scoring details, career suggestions, and advice.

Is fully ready to import into a React frontend and run on Replit.